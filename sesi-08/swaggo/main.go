package main

import (
	"encoding/json"
	"log"
	"net/http"

	"strconv"
	"time"

	_ "learn-swaggo/docs" //  docs is generated by Swag CLI, you have to import it.

	httpSwagger "github.com/swaggo/http-swagger"

	"github.com/gorilla/mux"
)

// Order repsesets the model for an order
type Order struct {
	OrderID 		string    `json:"orderId" example:"1"`
	CustomerName 	string 	  `json:"customerName" example:"Leo Messi"`
	OrderedAt		time.Time `json:"orderedAt" example:"2019-11-09T21:21:46+00:00"`
	Items 			[]Item 	  `json:"items"`
}

type Item struct {
	ItemID		string `json:"itemId" example:"A1B2C3"`
	Description	string `json:"description" example:"A random description"`
	Quantity	int 	`json:"quantity" example:"1"`
}

var orders []Order = []Order{
	{
		CustomerName: "Leo Messi",
		OrderID: "1",
		OrderedAt: time.Now(),
	},
	{
		CustomerName: "Ronaldo",
		OrderID: "2",
		OrderedAt: time.Now(),
	},
}

var prevOrderID = 0

// @title Orders API
// @Version 1.0
// @description This is a sample serice for managing orders
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email soberkoder@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.prg/licenses/LICENSE-2.0.html
// @host localhost:9000
// @BasePath /
func main()  {
	router := mux.NewRouter()
	// log.Fatal(http.ListenAndServe(":9000", router))

	// Create
	router.HandleFunc("/order", createOrder).Methods("POST")

	// Read By Id
	router.HandleFunc("/order/{orderId}", getOrderWhere).Methods("GET")
	
	// ReadAll
	router.HandleFunc("/orders", getOrders).Methods("GET")

	//Update
	router.HandleFunc("/order/{orderId}", updateOrder).Methods("PUT")

	// Delete
	router.HandleFunc("/order/{orderId}", deleteOrder).Methods("DELETE")

	router.PathPrefix("/swagger").Handler(httpSwagger.WrapHandler)
	log.Fatal(http.ListenAndServe(":9000", router))
}

// GetOrders godoc
// @Summary Get details of all orders
// @Description Get details of all orders
// @Tags orders
// @Accept json
// @Produce json
// @Success 200 {array} Order
// @Router /orders [get]
func getOrders(w http.ResponseWriter, r *http.Request)  {
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(orders)
}

// CreateOrder godoc
// @Summary Create a new orders
// @Description Create a new order with the input payload
// @Tags orders
// @Accept json
// @Produce json
// @Param order body Order true "Create Order"
// @Success 200 {object} Order
// @Router /orders [post]
func createOrder(w http.ResponseWriter, r *http.Request)  {
	w.Header().Set("Content-Type", "application/json")

	var order Order
	json.NewDecoder(r.Body).Decode(&order)
	prevOrderID++
	order.OrderID = strconv.Itoa(prevOrderID)
	orders = append(orders, order)
	json.NewEncoder(w).Encode(order)
}

// GetOrders godoc
// @Summary Get details by orderId
// @Description Get details by orderId
// @Tags orders
// @Accept json
// @Produce json
// Param orderId path int true "ID"
// @Success 200 {array} Order
// @Router /order/{orderId} [get]
func getOrderWhere(w http.ResponseWriter, r *http.Request)  {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)
	inputOrderId := params["orderId"]
	for _, order := range orders {
		if order.OrderID == inputOrderId {
			json.NewEncoder(w).Encode(order)
			return
		}
	}
}

// GetOrders godoc
// @Summary Delete data order where orderId
// @Description Delete data order by orderId
// @Tags orders
// @Accept json
// @Produce json
// Param orderId path int true "ID"
// @Success 204 "No Content"
// @Router /order/{orderId} [delete]
func deleteOrder(w http.ResponseWriter, r *http.Request)  {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)
	inputOrderId := params["orderId"]
	for i, order := range orders {
		if order.OrderID == inputOrderId {
			orders = append(orders[:1], orders[i+1:]...)
			w.WriteHeader(http.StatusNoContent)
			return
		}
	}
}

// UpdateOrders godoc
// @Summary Update order indentified by the given orderId
// @Description Update the order corresponding to the input order
// @Tags orders
// @Accept json
// @Produce json
// @Param orderID path int true "ID of the order to be update"
// @Success 204 {object} Order
// @Router /order/{orderId} [put]
func updateOrder(w http.ResponseWriter, r *http.Request)  {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)
	inputOrderId := params["orderId"]
	for i, order := range orders {
		if order.OrderID == inputOrderId {
			orders = append(orders[:1], orders[i+1:]...)
			var updateOrder Order
			json.NewDecoder(r.Body).Decode(&updateOrder)
			orders = append(orders, updateOrder)
			json.NewEncoder(w).Encode(updateOrder)
			return
		}
	}
}